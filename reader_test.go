/*  Sirikata Jpeg Texture Transfer Test Suite -- Texture Transfer management system
 *  reader_test.go
 *
 *  Copyright (c) 2015, Daniel Reiter Horn
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are
 *  met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"bytes"
	"github.com/danielrh/go-xz"
	"io"
	"testing"
)

func assertEqual(t *testing.T, a uint32, b int) {
	if int(a) != b {
		t.Errorf("%x != %x\n", a, b)
	}
}

func TestStuffedZeroBitStream(t *testing.T) {
	var b BitByteStream
	b.appendBytes([]byte{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00})
	ff, _ := b.scanBits(8, true)
	assertEqual(t, ff, 0xff)
	ff, _ = b.scanBits(16, true)
	assertEqual(t, ff, 0xffff)
	ff, _ = b.scanBits(1, true)
	assertEqual(t, ff, 0x1)
	ff, _ = b.scanBits(16, true)
	assertEqual(t, ff, 0xffff)
	sf, _ := b.scanBits(7, true)
	assertEqual(t, sf, 0x7f)
	var sb BitByteStream
	sb.appendBytes([]byte{0x81, 0xff, 0x00, 0x81, 0x80})
	one, _ := sb.scanBits(1, true)
	assertEqual(t, one, 0x1)
	zero, _ := sb.scanBits(6, true)
	assertEqual(t, zero, 0)
	oneff, _ := sb.scanBits(10, true)
	assertEqual(t, oneff, 0x3ff)
	zero, _ = sb.scanBits(6, true)
	assertEqual(t, zero, 0)
	three, _ := sb.scanBits(2, true)
	assertEqual(t, three, 3)
	zero, _ = sb.scanBits(6, true)
	assertEqual(t, zero, 0)
	one, _ = sb.scanBits(1, true)
	assertEqual(t, one, 0x0)
	var b2 BitByteStream
	b2.emitBits(0xff, 8, true)
	b2.emitBits(0xffff, 16, true)
	b2.emitBits(0x1, 1, true)
	b2.emitBits(0xffff, 16, true)
	b2.emitBits(0x7f, 7, true)
	b2.flushBits(true)
	if !bytes.Equal(b.buffer, b2.buffer) {
		t.Errorf("%x != %x\n", b.buffer, b2.buffer)
	}
	var sb2 BitByteStream
	sb2.emitBits(0x1, 1, true)
	sb2.emitBits(0x0, 6, true)
	sb2.emitBits(0x3ff, 10, true)
	sb2.emitBits(0x0, 6, true)
	sb2.emitBits(0x3, 2, true)
	sb2.emitBits(0x0, 6, true)
	sb2.emitBits(0x0, 1, true)
	sb2.flushBits(true)
	if !bytes.Equal(sb.buffer, sb2.buffer) {
		t.Errorf("%x != %x\n", sb.buffer, sb2.buffer)
	}

}

func TestRawBitStream(t *testing.T) {
	var b BitByteStream
	b.appendBytes([]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff})
	ff, _ := b.scanBits(8, false)
	assertEqual(t, ff, 0xff)
	ff, _ = b.scanBits(16, false)
	assertEqual(t, ff, 0xffff)
	ff, _ = b.scanBits(1, false)
	assertEqual(t, ff, 0x1)
	ff, _ = b.scanBits(16, false)
	assertEqual(t, ff, 0xffff)
	sf, _ := b.scanBits(7, false)
	assertEqual(t, sf, 0x7f)
	var sb BitByteStream
	sb.appendBytes([]byte{0x81, 0xff, 0x81, 0x80})
	one, _ := sb.scanBits(1, false)
	assertEqual(t, one, 0x1)
	zero, _ := sb.scanBits(6, false)
	assertEqual(t, zero, 0)
	oneff, _ := sb.scanBits(10, false)
	assertEqual(t, oneff, 0x3ff)
	zero, _ = sb.scanBits(6, false)
	assertEqual(t, zero, 0)
	three, _ := sb.scanBits(2, false)
	assertEqual(t, three, 3)
	zero, _ = sb.scanBits(6, false)
	assertEqual(t, zero, 0)
	one, _ = sb.scanBits(1, false)
	assertEqual(t, one, 0x0)
	var b2 BitByteStream
	b2.emitBits(0xff, 8, false)
	b2.emitBits(0xffff, 16, false)
	b2.emitBits(0x1, 1, false)
	b2.emitBits(0xffff, 16, false)
	b2.emitBits(0x7f, 7, false)
	b2.flushBits(false)
	if !bytes.Equal(b.buffer, b2.buffer) {
		t.Errorf("%x != %x\n", b.buffer, b2.buffer)
	}
	var sb2 BitByteStream
	sb2.emitBits(0x1, 1, false)
	sb2.emitBits(0x0, 6, false)
	sb2.emitBits(0x3ff, 10, false)
	sb2.emitBits(0x0, 6, false)
	sb2.emitBits(0x3, 2, false)
	sb2.emitBits(0x0, 6, false)
	sb2.emitBits(0x0, 1, false)
	sb2.flushBits(false)
	if !bytes.Equal(sb.buffer, sb2.buffer) {
		t.Errorf("%x != %x\n", sb.buffer, sb2.buffer)
	}
	var asymm BitByteStream
	asymm.appendBytes([]byte{0x00, 0xc0})
	o256, _ := asymm.scanBits(9, false)
	assertEqual(t, o256, 0x1)
	x40, _ := asymm.scanBits(7, false)
	assertEqual(t, x40, 0x40)
	var asymm2 BitByteStream
	asymm2.emitBits(0x1, 9, false)
	asymm2.emitBits(0x40, 7, false)
	if !bytes.Equal(asymm.buffer, asymm2.buffer) {
		t.Errorf("%x != %x\n", asymm.buffer, asymm2.buffer)
	}

}

var abstractJpeg = []byte{
	0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x48,
	0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x0B, 0x08, 0x08, 0x0A, 0x08, 0x07, 0x0B,
	0x0A, 0x09, 0x0A, 0x0D, 0x0C, 0x0B, 0x0D, 0x11, 0x1C, 0x12, 0x11, 0x0F, 0x0F, 0x11, 0x22, 0x19,
	0x1A, 0x14, 0x1C, 0x29, 0x24, 0x2B, 0x2A, 0x28, 0x24, 0x27, 0x27, 0x2D, 0x32, 0x40, 0x37, 0x2D,
	0x30, 0x3D, 0x30, 0x27, 0x27, 0x38, 0x4C, 0x39, 0x3D, 0x43, 0x45, 0x48, 0x49, 0x48, 0x2B, 0x36,
	0x4F, 0x55, 0x4E, 0x46, 0x54, 0x40, 0x47, 0x48, 0x45, 0xFF, 0xDB, 0x00, 0x43, 0x01, 0x0C, 0x0D,
	0x0D, 0x11, 0x0F, 0x11, 0x21, 0x12, 0x12, 0x21, 0x45, 0x2E, 0x27, 0x2E, 0x45, 0x45, 0x45, 0x45,
	0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45,
	0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45,
	0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0xFF, 0xC0,
	0x00, 0x11, 0x08, 0x00, 0x40, 0x00, 0x40, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11,
	0x01, 0xFF, 0xC4, 0x00, 0x1F, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
	0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05,
	0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7D, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21,
	0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08, 0x23,
	0x42, 0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0A, 0x16, 0x17,
	0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,
	0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A,
	0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A,
	0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,
	0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7,
	0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5,
	0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF1,
	0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFF, 0xC4, 0x00, 0x1F, 0x01, 0x00, 0x03,
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x11, 0x00,
	0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01, 0x02, 0x77, 0x00,
	0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13,
	0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xA1, 0xB1, 0xC1, 0x09, 0x23, 0x33, 0x52, 0xF0, 0x15,
	0x62, 0x72, 0xD1, 0x0A, 0x16, 0x24, 0x34, 0xE1, 0x25, 0xF1, 0x17, 0x18, 0x19, 0x1A, 0x26, 0x27,
	0x28, 0x29, 0x2A, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
	0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
	0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88,
	0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6,
	0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4,
	0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE2,
	0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	0xFA, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0xE6,
	0x68, 0xAD, 0xEF, 0xEC, 0x23, 0xFD, 0xDA, 0x3F, 0xB0, 0x8F, 0xF7, 0x6B, 0xC6, 0xF6, 0x72, 0x3F,
	0x4B, 0xFA, 0xDD, 0x2E, 0xE6, 0x0D, 0x15, 0xBD, 0xFD, 0x84, 0x7F, 0xBB, 0x47, 0xF6, 0x11, 0xFE,
	0xED, 0x1E, 0xCE, 0x41, 0xF5, 0xBA, 0x5D, 0xCF, 0x54, 0xD0, 0x3F, 0xE4, 0x5E, 0xD3, 0x3F, 0xEB,
	0xD2, 0x2F, 0xFD, 0x00, 0x56, 0x85, 0x52, 0xD1, 0x53, 0xCA, 0xD1, 0x34, 0xF8, 0xCF, 0x54, 0xB6,
	0x8D, 0x7F, 0x25, 0x15, 0x76, 0xBD, 0x78, 0xFC, 0x28, 0xFC, 0xE6, 0xB3, 0xBD, 0x49, 0x7A, 0xB3,
	0x97, 0xD5, 0xFF, 0x00, 0xE4, 0x29, 0x3F, 0xFC, 0x07, 0xFF, 0x00, 0x41, 0x15, 0x4A, 0xB6, 0x75,
	0x0D, 0x2E, 0xE6, 0xE2, 0xFA, 0x59, 0x63, 0x0B, 0xB5, 0xB1, 0x8C, 0xB7, 0xB0, 0x15, 0x5F, 0xFB,
	0x12, 0xF3, 0xFB, 0xA9, 0xFF, 0x00, 0x7D, 0x57, 0xC7, 0x62, 0x70, 0x78, 0x89, 0x57, 0x9C, 0x94,
	0x1D, 0x9B, 0x7D, 0x3C, 0xCF, 0x56, 0x95, 0x6A, 0x6A, 0x11, 0x4E, 0x4B, 0x64, 0x5B, 0xFE, 0xC4,
	0x5F, 0x41, 0x47, 0xF6, 0x22, 0xFA, 0x0A, 0xD9, 0xA2, 0xBE, 0xC3, 0x92, 0x27, 0x9B, 0xF5, 0x9A,
	0xBD, 0xCC, 0x6F, 0xEC, 0x45, 0xF4, 0x14, 0x7F, 0x62, 0x2F, 0xA0, 0xAD, 0x9A, 0x47, 0x25, 0x51,
	0x88, 0x04, 0x90, 0x3A, 0x0A, 0x39, 0x22, 0x1F, 0x59, 0xA9, 0xDC, 0x6C, 0x11, 0xF9, 0x50, 0x47,
	0x1F, 0xF7, 0x14, 0x2F, 0xE4, 0x29, 0xF5, 0xE7, 0xFA, 0x9D, 0xC7, 0x88, 0x1A, 0xF6, 0x4F, 0xB3,
	0xA6, 0xA4, 0xB1, 0x8E, 0x9B, 0x23, 0x7C, 0x7F, 0x2A, 0xEB, 0x7C, 0x38, 0x6E, 0x9B, 0x43, 0xB7,
	0x37, 0xDE, 0x6F, 0xDA, 0x3E, 0x7D, 0xDE, 0x70, 0x21, 0xBE, 0xF1, 0xC6, 0x73, 0xCF, 0x4C, 0x56,
	0x54, 0xAB, 0xFB, 0x49, 0x38, 0xD9, 0xAB, 0x1E, 0x7D, 0x3C, 0x47, 0xB5, 0x9B, 0x8D, 0x99, 0xA7,
	0x45, 0x14, 0x57, 0x41, 0xD0, 0x73, 0x3F, 0xF0, 0x93, 0x5C, 0xFF, 0x00, 0xCF, 0x18, 0xBF, 0x5F,
	0xF1, 0xA3, 0xFE, 0x12, 0x6B, 0x9F, 0xF9, 0xE3, 0x17, 0xEB, 0xFE, 0x35, 0x1F, 0xFC, 0x23, 0x97,
	0xBF, 0xDE, 0x8B, 0xFE, 0xFA, 0x3F, 0xE1, 0x47, 0xFC, 0x23, 0x97, 0xBF, 0xDE, 0x8B, 0xFE, 0xFA,
	0x3F, 0xE1, 0x5E, 0xAD, 0xB0, 0xDE, 0x47, 0xC6, 0xF3, 0x66, 0xDF, 0xDE, 0xFB, 0x89, 0x3F, 0xE1,
	0x26, 0xB9, 0xFF, 0x00, 0x9E, 0x31, 0x7E, 0xBF, 0xE3, 0x47, 0xFC, 0x24, 0xD7, 0x3F, 0xF3, 0xC6,
	0x2F, 0xD7, 0xFC, 0x6A, 0x3F, 0xF8, 0x47, 0x2F, 0x7F, 0xBD, 0x17, 0xFD, 0xF4, 0x7F, 0xC2, 0x8F,
	0xF8, 0x47, 0x2F, 0x7F, 0xBD, 0x17, 0xFD, 0xF4, 0x7F, 0xC2, 0x8B, 0x61, 0xBC, 0x83, 0x9B, 0x36,
	0xFE, 0xF7, 0xDC, 0x49, 0xFF, 0x00, 0x09, 0x35, 0xCF, 0xFC, 0xF1, 0x8B, 0xF5, 0xFF, 0x00, 0x1A,
	0x3F, 0xE1, 0x26, 0xB9, 0xFF, 0x00, 0x9E, 0x31, 0x7E, 0xBF, 0xE3, 0x51, 0xFF, 0x00, 0xC2, 0x39,
	0x7B, 0xFD, 0xE8, 0xBF, 0xEF, 0xA3, 0xFE, 0x14, 0x7F, 0xC2, 0x39, 0x7B, 0xFD, 0xE8, 0xBF, 0xEF,
	0xA3, 0xFE, 0x14, 0x5B, 0x0D, 0xE4, 0x1C, 0xD9, 0xB7, 0xF7, 0xBE, 0xE2, 0x4F, 0xF8, 0x49, 0xAE,
	0x7F, 0xE7, 0x8C, 0x5F, 0xAF, 0xF8, 0xD1, 0xFF, 0x00, 0x09, 0x35, 0xCF, 0xFC, 0xF1, 0x8B, 0xF5,
	0xFF, 0x00, 0x1A, 0x8F, 0xFE, 0x11, 0xCB, 0xDF, 0xEF, 0x45, 0xFF, 0x00, 0x7D, 0x1F, 0xF0, 0xA3,
	0xFE, 0x11, 0xCB, 0xDF, 0xEF, 0x45, 0xFF, 0x00, 0x7D, 0x1F, 0xF0, 0xA2, 0xD8, 0x6F, 0x20, 0xE6,
	0xCD, 0xBF, 0xBD, 0xF7, 0x1D, 0x55, 0x14, 0x51, 0x5E, 0x51, 0xF6, 0x41, 0x45, 0x14, 0x50, 0x01,
	0x45, 0x14, 0x50, 0x01, 0x45, 0x14, 0x50, 0x07, 0xFF, 0xD9,
	0x4a, 0x55, 0x4e, 0x4b, 0x4a, 0x55, 0x4e, 0x4b, 0x4a, 0x55, 0x4e, 0x4b, 0x4a, 0x55, 0x4e, 0x4b, // <-- JUNK at end
	0x4a, 0x55, 0x4e, 0x4b, 0x4a, 0x55, 0x4e, 0x4b, 0x4a, 0x55, 0x4e, 0x4b, 0x4a, 0x55} // <-- JUNK at end

func helperForCompression(t *testing.T,
	compress func(io.Reader, io.Writer) error,
	decompress func(io.Reader, io.Writer) error, idArhc bool, idXz bool) {
	initialReader := bytes.NewBuffer(abstractJpeg)
	var magic [6]byte
	nMagic, err := io.ReadFull(initialReader, magic[:])
	isArhc := DecodeIsARHC(magic[:nMagic])
	isXz := DecodeIs7z(magic[:nMagic])
	isJpeg := DecodeIsJPEG(magic[:nMagic])
	if !isJpeg {
		t.Errorf("Should identify %x as jpeg\n", magic[:nMagic])
	}
	if isArhc {
		t.Errorf("Shouldnt identify %x as arhc\n", magic[:nMagic])
	}
	if isXz {
		t.Errorf("Shouldnt identify %x as xz\n", magic[:nMagic])
	}

	inputReader := NewMagicNumberInjectionReader(&xz.NopCloseReadWrapper{initialReader}, magic[:nMagic])
	var arhc bytes.Buffer
	compress(&inputReader, &arhc)
	arhc2 := bytes.NewBuffer(arhc.Bytes())
	nMagic, err = io.ReadFull(arhc2, magic[:])
	isArhc = DecodeIsARHC(magic[:nMagic])
	isXz = DecodeIs7z(magic[:nMagic])
	isJpeg = DecodeIsJPEG(magic[:nMagic])
	if isJpeg {
		t.Errorf("Shouldnt identify %x as jpeg\n", magic[:nMagic])
	}
	if isArhc != idArhc {
		t.Errorf("Should identify %x as arhc\n", magic[:nMagic])
	}
	if isXz != idXz {
		t.Errorf("Shouldnt identify %x as xz\n", magic[:nMagic])
	}
	roundTripReader := NewMagicNumberInjectionReader(&xz.NopCloseReadWrapper{arhc2}, magic[:nMagic])
	var roundTrip bytes.Buffer
	err = decompress(&roundTripReader, &xz.NopCloseWriteWrapper{&roundTrip})
	if err != nil {
		t.Errorf("Error %v\n", err)
	}
	if !bytes.Equal(roundTrip.Bytes(), abstractJpeg) {
		t.Errorf("Round Trip %d bytes != Original %d bytes\n", len(roundTrip.Bytes()), len(abstractJpeg))
	}
	if len(arhc.Bytes()) > 9*len(abstractJpeg)/10 {
		t.Errorf("Poorly Compressed %d bytes > 90%% of Original %d bytes\n", len(arhc.Bytes()), len(abstractJpeg))
	}
}
func TestAhrcCompression(t *testing.T) {
	helperForCompression(t,
		func(r io.Reader, w io.Writer) error { return CompressJPEGtoARHC(r, w, comp12coalesce) },
		DecompressARHCtoJPEG, true, false)
}

func TestXzCompression(t *testing.T) {
	helperForCompression(t,
		CompressAnyto7Z,
		Decompress7ZtoAny, false, true)
}
